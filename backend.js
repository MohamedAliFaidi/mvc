(()=>{var e={953:e=>{e.exports=class{static async testAdmin(e,t){try{t.status(200).json({message:"you reached the backend admin route"})}catch(e){console.log(e,"in controller"),t.status(500).json({message:"error"})}}static async checkAdmin(e,t){try{t.status(200).json({message:"admin role exists"})}catch(e){t.status(500).json({message:"server error"})}}}},276:(e,t,s)=>{const o=s(269),r=s(486),a=s(829),i=s(468),n=s(402);e.exports=class{static async verifyCode(e,t){try{const s=await i.findOne({code:e.body.code});if(!s)return t.status(400).json({message:"invalid verification link"});if(await o.findOne({email:s.email}))return t.status(400).json({message:"user already exist"});t.status(200).json(s)}catch(e){console.log(e),t.status(500).json(e)}}static async sendEmail(e,t){try{if(await o.findOne({email:e.body.email}))return t.status(400).json({message:"user already exist"});const s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let r="";for(let e=0;e<12;e++){const e=Math.floor(Math.random()*s.length);r+=s.charAt(e)}n.sendEmail(e.body.email,"Email verification",`\n      <p>Hello there!</p>\n      <p>Your verification code is: <strong>${r}</strong></p>\n      <p>Click the button below to verify your email:</p>\n      <a href="http://localhost:5173/register?code=${r}">Production test</a>\n      <a href="http://localhost:5173/register?code=${r}">dev link</a>\n      <a href="http://localhost:3000/register?code=${r}" style="display: inline-block; padding: 10px 20px; background-color: #4CAF50; color: white; text-decoration: none;">Verify Email</a>\n    `);const a=await i.create({email:e.body.email,name:e.body.username,code:r});t.status(201).json(a)}catch(e){console.log(e),t.status(500).json({message:"error"})}}static async register(e,t){try{if(await o.findOne({email:e.body.email}))return t.status(400).json({message:"user already exist"});const s=await r.hash(e.body.password,10);await o.create({username:e.body.username,email:e.body.email,password:s});const a=await i.deleteMany({email:e.body.email});console.log(a),t.status(201).json({message:"ok"})}catch(e){console.log(e),t.status(500).json({message:"error"})}}static async login(e,t){try{const s=await o.findOne({email:e.body.email});if(!s)return t.status(400).json({message:"user not found"});if(!await r.compare(e.body.password,s.password))return t.status(401).json({message:"wrong password"});const i=Date.now()+36e5,n=a.sign({id:s._id,exp:i,role:s.role},process.env.SECRET_KEY);console.log(s),t.cookie("Authorization",n).status(200).json({user:{email:s.email,username:s.username,_id:s._id,role:s.role,avatar:s.avatar||null}})}catch(e){console.log(e),t.status(500).json({message:"error"})}}static async logout(e,t){try{t.clearCookie("Authorization"),t.status(200).json({message:"logged out"})}catch(e){console.log(e),t.status(500).json({message:"error"})}}}},203:(e,t,s)=>{const o=s(818),r=s(269),a=s(416).v2;e.exports=class{static check(e,t){try{t.status(200).json({message:"user role exists"})}catch(e){console.log(e),t.clearCookie("Authorization"),t.status(500).json({error:e})}}static async#e(e){return new Promise(((t,s)=>{a.uploader.destroy(e,(function(e,o){e&&(console.log(e),s(e)),t(o)}))}))}static async updateUser(e,t){try{console.log(e.params,e.query),o.config(),a.config({cloud_name:process.env.CLOUD_NAME,api_key:process.env.CLOUD_KEY,api_secret:process.env.CLOUD_SECRET,secure:!0});const s=await new Promise(((t,s)=>{a.uploader.upload(e.body.data,{folder:"avatars",resource_type:"auto"},(function(e,o){e&&(console.log(e),s(e)),t(o)}))}));await r.findByIdAndUpdate(e.params.id,{avatar:{public_id:s.public_id,url:s.secure_url}}),t.status(200).json({message:"updated with success",avatar:s})}catch(e){console.log(e),t.status(500).json({message:"error while uploading your file"})}}}},284:(e,t,s)=>{const o=s(829);class r{static#t(e){return o.verify(e,process.env.SECRET_KEY)}static async checkAdmin(e,t,s){try{const s=e.headers.cookie.split("=")[1],o=r.#t(s);if(o&&"admin"!==o.role)return t.status(401).json({message:"Action reserved for admin only"})}catch(e){return console.log(e),t.status(500).json({error:e.message})}s()}static async checkAuth(e,t,s){try{if(!e.headers.cookie)return t.status(401).json({message:"Unauthorized access detected"});const o=e.headers.cookie.split("=")[1],a=r.#t(o);if(a&&a.exp<Date.now())return t.clearCookie("Authorization"),t.status(400).json({isAuth:!1,message:"Session expired, please log in again"});s()}catch(e){return console.log(e),t.status(500).json({error:e.message})}}}e.exports=r},468:(e,t,s)=>{const o=s(37);class r{static#s=new o.Schema({email:{type:String,required:!0},code:{type:String,required:!0},name:{type:String,required:!0}});static getModel(){return o.model("Prom",this.#s)}}e.exports=r.getModel()},269:(e,t,s)=>{const o=s(37);class r{static#s=new o.Schema({username:{type:String,required:!0},email:{type:String,required:!0},password:{type:String,required:!0},role:{type:String,required:!0,default:"user"},avatar:{url:String,public_id:String}});static getModel(){return o.model("User",this.#s)}}e.exports=r.getModel()},893:(e,t,s)=>{const o=s(252),r=s(953);class a{static#o=o.Router();static#r(){this.#o.get("/isadmin",r.checkAdmin),this.#o.get("/admintest",r.testAdmin)}static getRouter(){return this.#r(),this.#o}}e.exports=a.getRouter()},116:(e,t,s)=>{const o=s(252),r=s(276);class a{static#o=o.Router();static#r(){this.#o.post("/register",r.register),this.#o.post("/register-code",r.verifyCode),this.#o.post("/send-email",r.sendEmail),this.#o.post("/login",r.login),this.#o.get("/logout",r.logout)}static getRouter(){return this.#r(),this.#o}}e.exports=a.getRouter()},187:(e,t,s)=>{const o=s(252),r=s(116),a=s(121),i=s(893),n=s(284);class c{static#o=o.Router();static#a(){this.#o.use("/auth",r),this.#o.use("/user",n.checkAuth,a),this.#o.use("/admin",n.checkAuth,n.checkAdmin,i)}static getRouter(){return this.#a(),this.#o}}e.exports=c.getRouter()},121:(e,t,s)=>{const o=s(252),r=s(203);class a{static#o=o.Router();static#r(){this.#o.get("/check",r.check),this.#o.post("/update/:id",r.updateUser)}static getRouter(){return this.#r(),this.#o}}e.exports=a.getRouter()},402:(e,t,s)=>{const o=s(572);s(818).config(),e.exports=new class{constructor(){this.transporter=o.createTransport({host:process.env.EMAIL_HOST,port:process.env.EMAIL_PORT,auth:{user:process.env.EMAIL_USER,pass:process.env.EMAIL_PASS}})}sendEmail(e,t,s){const o={from:process.env.EMAIL_USER,to:e,subject:t,html:s};this.transporter.sendMail(o,((e,t)=>{e?console.error("Error sending email:",e):console.log("Email sent:",t.response)}))}}},486:e=>{"use strict";e.exports=require("bcrypt")},416:e=>{"use strict";e.exports=require("cloudinary")},174:e=>{"use strict";e.exports=require("compression")},898:e=>{"use strict";e.exports=require("cookie-parser")},577:e=>{"use strict";e.exports=require("cors")},818:e=>{"use strict";e.exports=require("dotenv")},252:e=>{"use strict";e.exports=require("express")},525:e=>{"use strict";e.exports=require("helmet")},829:e=>{"use strict";e.exports=require("jsonwebtoken")},37:e=>{"use strict";e.exports=require("mongoose")},572:e=>{"use strict";e.exports=require("nodemailer")},928:e=>{"use strict";e.exports=require("path")}},t={};function s(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={exports:{}};return e[o](a,a.exports,s),a.exports}(()=>{const e=s(252),t=s(174),o=s(37),r=s(898),a=s(818),i=(s(525),s(187)),n=s(928);new class{constructor(){this.app=e(),this.setup(),this.routes(),this.listen()}setup(){a.config();const i=s(577);this.app.use(i({origin:"http://localhost:5173",credentials:!0})),this.app.use(t()),this.app.use(e.json({limit:"10mb"})),this.app.use(r()),o.connect(process.env.MONGODB_URI).then((()=>console.log("mongodb connected"))).catch((()=>console.log("error connecting to the database")))}routes(){this.app.use("/api",i),this.app.use(e.static(n.join(__dirname,"./dist"))),this.app.get("*",((e,t)=>{console.log("==============================================================================================="),console.log(e.headers),console.log("==============================================================================================="),t.status(200).sendFile(n.join(__dirname,"./dist","index.html"))}))}listen(){const e=process.env.PORT||3e3;this.app.listen(e,(()=>{console.log(`Server is running on port ${e}`)}))}}})()})();